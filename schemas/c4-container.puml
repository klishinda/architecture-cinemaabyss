@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title "C4 диаграмма контейнеров стартапа Кинобездна (с BFF и прямым доступом к S3)"

Person(user, "Пользователь", "Мобильные, ноутбуки, smart TV")
System_Ext(ps, "Платёжная система", "НСПК")
System_Ext(rs, "Рекомендательная система")
System_Ext(cinemas, "Онлайн кинотеатры")

System_Boundary(sb1, "Контекст интерфейсов") {
  Container(tv, "Smart TV", "TV API", "Просмотр по TV")
  Container(web, "Web интерфейс", "React", "Просмотр через web")
  Container(mobile, "Mobile интерфейс", "iOS/Android", "Просмотр через мобильные устройства")
}

System_Boundary(sb_bff, "BFF Layer") {
  Container(bff_web, "BFF Web", "Go/Node.js", "Агрегация и подготовка данных для web")
  Container(bff_mobile, "BFF Mobile", "Go/Node.js", "Агрегация и подготовка данных для мобильных клиентов")
  Container(bff_tv, "BFF TV", "Go/Node.js", "Агрегация и подготовка данных для Smart TV")
}

System_Boundary(sb2, "Контекст подписок") {
  Container(subscriptions, "Сервис управления подписками", "Go", "Тарифы, подписки и их опции")
  ContainerDb(subscriptions_db, "БД подписок", "Postgresql", "Подписки и опции пользователей")
}

System_Boundary(sb4, "Пользовательские настройки") {
  Container(user_management, "Управление учёткой", "Go", "Личный кабинет и семьи")
  ContainerDb(user_db, "БД пользователей", "Postgresql", "Инфо о пользователях")
}

System_Boundary(sb5, "Фильмы") {
  Container(film, "Сервис фильмов", "Go", "Управление фильмами")
  ContainerDb(film_db, "БД фильмов", "Postgresql", "Метаинформация о фильмах")
  Container(film_user_management, "Фильмы и пользователь", "Go", "Лайки, оценки, избранное, статистика")
  ContainerDb(film_statistics_db, "БД статистики фильмов", "Postgresql", "История просмотров, % просмотра")
}

System_Boundary(sb6, "Авторизация") {
  Container(authorization, "Авторизация", "Go", "Аутентификация пользователей")
  ContainerDb(authorization_db, "БД авторизации", "Postgresql", "Пароли и доступы")
}

System_Boundary(sb7, "Нотификации") {
  Container(notification, "Сервис нотификаций", "Go", "Оповещения пользователей")
  ContainerDb(notification_db, "БД нотификаций", "Postgresql", "История отправок")
}

System_Boundary(sb8, "Оплата") {
  Container(payment, "Сервис оплаты", "Go", "Обработка платежей")
  ContainerDb(payment_db, "БД оплат", "Postgresql", "История оплат и реквизиты")
}

System_Boundary(sb9, "Отзывы") {
  Container(review, "Отзывы", "Go", "Отзывы и рецензии")
  ContainerDb(review_db, "БД отзывов", "Postgresql", "Комментарии пользователей")
}

System_Boundary(sb10, "Видео") {
  Container(films_handler, "Обработка фильмов", "Go", "Подготовка и кодирование видео")
  Container(s3, "S3", "CDN", "Хранение и отдача видео")
}

System_Boundary(sb11, "Рекомендации") {
  Container(recommendation, "Рекомендации", "Go", "Работа с рекомендациями")
  ContainerDb(recommendation_db, "БД рекомендаций", "Postgresql", "Хранение рекомендаций")
}

Container(api_gate, "API Gateway", "Kong", "Маршрутизатор запросов")
ContainerDb(cache, "Кэш", "Redis", "Сессии и быстрые данные")
ContainerQueue(rabbitmq_rs, "Очередь RS", "RabbitMQ", "Интеграция с рекомендательной системой")
ContainerQueue(rabbitmq_comment, "Очередь отзывов", "RabbitMQ", "События новых отзывов")
ContainerQueue(rabbitmq_films, "Очередь фильмов", "RabbitMQ", "Загрузка новых фильмов")
ContainerQueue(rabbitmq_metafilms, "Очередь метаданных фильмов", "RabbitMQ", "Метаинформация о фильмах")

' --- связи пользователей ---
Rel(user, web, "Использует", "HTTP/REST")
Rel(user, mobile, "Использует", "HTTP/REST")
Rel(user, tv, "Использует", "HTTP/REST")

' --- BFF и API Gateway ---
Rel(web, bff_web, "Запрос", "REST/GraphQL")
Rel(mobile, bff_mobile, "Запрос", "REST/GraphQL")
Rel(tv, bff_tv, "Запрос", "REST/GraphQL")

Rel(bff_web, api_gate, "Запрос", "REST")
Rel(bff_mobile, api_gate, "Запрос", "REST")
Rel(bff_tv, api_gate, "Запрос", "REST")

' --- прямой доступ к S3 для воспроизведения ---
Rel(bff_web, s3, "Запрос pre-signed URL", "REST")
Rel(bff_mobile, s3, "Запрос pre-signed URL", "REST")
Rel(bff_tv, s3, "Запрос pre-signed URL", "REST")

Rel(s3, web, "Воспроизведение видео", "HTTP/HLS/DASH")
Rel(s3, mobile, "Воспроизведение видео", "HTTP/HLS/DASH")
Rel(s3, tv, "Воспроизведение видео", "HTTP/HLS/DASH")

' --- оставшиеся связи как раньше ---
Rel(api_gate, cache, "Кэширование", "Redis")

Rel(api_gate, payment, "Оплата", "REST")
Rel(payment, payment_db, "SQL")
Rel(payment, ps, "REST")

Rel(api_gate, subscriptions, "Подписки", "REST")
Rel(subscriptions, subscriptions_db, "SQL")

Rel(api_gate, authorization, "Авторизация", "REST")
Rel(authorization, authorization_db, "SQL")

Rel(api_gate, user_management, "Аккаунт", "REST")
Rel(user_management, user_db, "SQL")

Rel(film, film_db, "SQL")
Rel(film, review, "REST")

Rel(review, review_db, "SQL")
Rel(review, rabbitmq_comment, "AMQP")

Rel(recommendation, recommendation_db, "SQL")

Rel(notification, notification_db, "SQL")
Rel(rabbitmq_comment, notification, "AMQP")

Rel(api_gate, film_user_management, "REST")
Rel(film, film_user_management, "REST")
Rel(film_user_management, film_statistics_db, "SQL")

Rel(rabbitmq_rs, rs, "AMQP")
Rel(recommendation, rabbitmq_rs, "AMQP")

Rel(cinemas, rabbitmq_films, "AMQP")
Rel(rabbitmq_films, films_handler, "AMQP")
Rel(films_handler, rabbitmq_metafilms, "AMQP")
Rel(rabbitmq_metafilms, film, "AMQP")
Rel(films_handler, s3, "REST")
Rel(rabbitmq_metafilms, recommendation, "AMQP")
Rel(rabbitmq_metafilms, notification, "AMQP")

@enduml
